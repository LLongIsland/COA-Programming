package cpu.alu;

import static org.junit.Assert.assertEquals;

import org.junit.Test;

public class ALUTest {

    private ALU alu = new ALU();

    @Test
    public void testShift1() {
        assertEquals("00010100001110100010100000000000", alu.shl("00000000000000000000000000001010", "00011100000001010000111010001010"));
    }

    @Test
    public void testShift2() {
        assertEquals("00000000000000000000000000000000", alu.shl("01111111111111111111111100000010", "01001001110000111111011101011101"));
    }

    @Test
    public void testShift3() {
        assertEquals("00001001100100100100011000111011", alu.shr("00000000000000000000000000000001", "00010011001001001000110001110111"));
    }

    @Test
    public void testShift4() {
        assertEquals("00000010000001001010000010100000", alu.shr("00000000000000000000000000000110", "10000001001010000010100000111111"));
    }

    @Test
    public void testShift5() {
        assertEquals("00011000001000100000000000000000", alu.sal("00000000000000000000000000010001", "10010001100110111000110000010001"));
    }

    @Test
    public void testShift6() {
        assertEquals("00000000000000000000000000000000", alu.sal("00000000000000000000000000100000", "10000101110100100111111110110110"));
    }

    @Test
    public void testShift7() {
        assertEquals("11101101000101000010111100111001", alu.sar("00000000000000000000000000000010", "10110100010100001011110011100100"));
    }

    @Test
    public void testShift8() {
        assertEquals("00001101010100101000111101001111", alu.sar("00000000000000000000000000000010", "00110101010010100011110100111111"));
    }

    @Test
    public void testShift9() {
        assertEquals("00111101010111111110101111110110", alu.rol("00000000000000000000000000100000", "00111101010111111110101111110110"));
    }

    @Test
    public void testShift10() {
        assertEquals("10010000011011101010011001001010", alu.rol("00000000000000000000000000001010", "10010010101001000001101110101001"));
    }

    @Test
    public void testShift11() {
        assertEquals("00111101010111111110101111110110", alu.ror("00000000000000000000000000000000", "00111101010111111110101111110110"));
    }

    @Test
    public void testShift12() {
        assertEquals("10011001001010100100000110111010", alu.ror("00000000000000000000000000000100", "10010010101001000001101110101001"));
    }

    @Test
    public void testAnd1() {
        assertEquals("00000000000000000000000000000001", alu.and("00000000000000000000000000000101", "10010010101001000001101110101001"));
    }

    @Test
    public void testAnd2() {
        assertEquals("00000000000000000000000000000101", alu.and("00000000000000000000000000000101", "10010010101001000001101110101111"));
    }

    @Test
    public void testOr1() {
        assertEquals("10010010101001000001101110101101", alu.or("00000000000000000000000000000101", "10010010101001000001101110101001"));
    }

    @Test
    public void testOr2() {
        assertEquals("10010010101001000001101110101111", alu.or("00000000000000000000000000000101", "10010010101001000001101110101111"));
    }

    @Test
    public void testXor1() {
        assertEquals("10010010101001000001101110101100", alu.xor("00000000000000000000000000000101", "10010010101001000001101110101001"));
    }

    @Test
    public void testXor2() {
        assertEquals("10010010101001000001101110101010", alu.xor("00000000000000000000000000000101", "10010010101001000001101110101111"));
    }

    @Test
    public void testImod1() {
        assertEquals("00000000000000000000000000000001", alu.imod("00000000000000000000000000000101", "00000000000000000000000011010011"));
    }

    @Test
    //-189%5=-4
    public void testImod2() {
        assertEquals("11111111111111111111111111111100", alu.imod("00000000000000000000000000000101", "11111111111111111111111101000011"));
    }
    @Test
    //4%2=0
    public void testImod3() {
        assertEquals("00000000000000000000000000000000", alu.imod("00000000000000000000000000000010", "00000000000000000000000000000100"));
    }
    @Test
    //-13%-7=6
    public void testImod4() {
        assertEquals("00000000000000000000000000000110", alu.imod("11111111111111111111111111111001", "11111111111111111111111111110011"));
    }
    @Test
    //-7%3=-1
    public void testImod5() {
        assertEquals("11111111111111111111111111111111", alu.imod("00000000000000000000000000000011", "11111111111111111111111111111001"));
    }
    @Test
    //7%-4=3
    public void testImod6() {
        assertEquals("00000000000000000000000000000011", alu.imod("11111111111111111111111111111100", "00000000000000000000000000000111"));
    }
    @Test
    //7%-3=1
    public void testImod7() {
        assertEquals("00000000000000000000000000000001", alu.imod("11111111111111111111111111111101", "00000000000000000000000000000111"));
    }

    @Test
    public void testAdd1() {
        assertEquals("00000000000000000000000000001000", alu.add("00000000000000000000000000000100", "00000000000000000000000000000100"));
    }

    @Test
    public void testAdd2() {
        assertEquals("11111010101001000110011110000111", alu.add("11111000100110000101011000000110", "00000010000011000001000110000001"));
    }

	@Test
	public void testAdd3() {
		assertEquals("00000000000000111010100000100001", alu.add("00000000000000111001001101010100", "00000000000000000001010011001101"));
	}

	@Test
	public void testAdd4() {
		assertEquals("11111111111111000101011111011111", alu.add("11111111111111000110110010101100", "11111111111111111110101100110011"));
	}

	@Test
	public void testAdd5() {
		assertEquals("00000000001011011110011001101100", alu.add("11111111111111000110110100000110", "00000000001100010111100101100110"));
	}

    @Test
    public void testSub1() {
		assertEquals("00000000000000000000000000000000", alu.sub("00000000000000000000000000000100", "00000000000000000000000000000100"));
    }

    @Test
    public void testSub2() {
		assertEquals("00000000000000110111111010000111", alu.sub("00000000000000000001010011001101", "00000000000000111001001101010100"));
    }

	@Test
	public void testSub3() {
		assertEquals("11111111110100100001100110010100", alu.sub("00000000001100010111100101100110", "00000000000000111001001011111010"));
	}

	@Test
	public void testSub4() {
		assertEquals("11111111110010101111001110100000", alu.sub("00000000001100010111100101100110", "11111111111111000110110100000110"));
	}

	@Test
	public void testSub5() {
		assertEquals("11111111111111001110101101011100", alu.sub("11111111111111111000000110101010", "11111111111111000110110100000110"));
	}
}
